import { GoogleGenAI, Modality } from "@google/genai";

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

export async function changePose(
    base64ImageData: string,
    mimeType: string,
    base64BackgroundImageData: string | null,
    backgroundMimeType: string | null,
    base64ClothingImageData: string | null,
    clothingMimeType: string | null,
    posePrompt: string,
    backgroundPrompt: string,
    clothingPrompt: string,
    preserveBodyShape: boolean
): Promise<string> {
    try {
        const personImagePart = {
            inlineData: {
                data: base64ImageData,
                mimeType: mimeType,
            },
        };

        const parts: any[] = [personImagePart];
        let text = `Given the provided images and instructions, generate a new image. The first image is always the person to be modified.`;

        if (base64ClothingImageData && clothingMimeType) {
            const clothingImagePart = { inlineData: { data: base64ClothingImageData, mimeType: clothingMimeType } };
            parts.push(clothingImagePart);
            text += ` Use the second image as a reference to change the clothing of the person in the first image.`;
            if (clothingPrompt && clothingPrompt.trim() !== '') {
                 text += ` When doing so, also follow these instructions: "${clothingPrompt}".`;
            }
        } else if (clothingPrompt && clothingPrompt.trim() !== '') {
            text += ` Change their clothing and style to be: "${clothingPrompt}".`;
        }
        
        if (base64BackgroundImageData && backgroundMimeType) {
            const backgroundImagePart = {
                inlineData: {
                    data: base64BackgroundImageData,
                    mimeType: backgroundMimeType,
                },
            };
            parts.push(backgroundImagePart);
            text += ` Place the person into the provided background image.`;
            if (backgroundPrompt && backgroundPrompt.trim() !== '') {
                 text += ` When doing so, follow these instructions: "${backgroundPrompt}".`;
            }
        } else if (backgroundPrompt && backgroundPrompt.trim() !== '') {
            text += ` Also, change the background to be: "${backgroundPrompt}".`;
        } else {
            text += ` Keep the original background.`;
        }
        
        if (posePrompt && posePrompt.trim() !== '') {
            text += ` Change their pose to be: "${posePrompt}".`;
        } else {
            text += ` Keep their original pose.`;
        }
        
        text += ` The person's facial features and identity from the original image must be preserved.`;

        if (preserveBodyShape) {
            text += ` It is crucial to also preserve the person's original body shape and size. Do not make them thinner, larger, or change their proportions.`;
        }

        parts.push({ text: text });


        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image-preview',
            contents: {
                parts: parts,
            },
            config: {
                responseModalities: [Modality.IMAGE, Modality.TEXT],
            },
        });
        
        if (response.candidates && response.candidates.length > 0) {
            for (const part of response.candidates[0].content.parts) {
                if (part.inlineData) {
                    return `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`;
                }
            }
        }
        
        const textResponse = response.text;
        if (textResponse) {
             throw new Error(`AI returned text instead of an image: "${textResponse}"`);
        }

        throw new Error("No image was generated by the AI.");

    } catch (error) {
        console.error("Error calling Gemini API:", error);
        throw new Error("The AI model failed to process the request. Please try again.");
    }
}