import { GoogleGenAI, Modality } from "@google/genai";

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

export async function changePose(
    base64ImageData: string,
    mimeType: string,
    posePrompt: string,
    backgroundPrompt: string,
    clothingPrompt: string,
    preserveBodyShape: boolean
): Promise<string> {
    try {
        let text = `Given the image of the person, `;
        if (posePrompt && posePrompt.trim() !== '') {
            text += `change their pose to be: "${posePrompt}".`;
        } else {
            text += `keep their original pose.`;
        }

        if (clothingPrompt && clothingPrompt.trim() !== '') {
            text += ` Also, change their clothing and style to be: "${clothingPrompt}".`;
        }
        
        if (backgroundPrompt && backgroundPrompt.trim() !== '') {
            text += ` Also, change the background to be: "${backgroundPrompt}".`;
        } else {
            text += ` Keep the original background.`;
        }
        
        text += ` The person's facial features and identity from the original image must be preserved.`;

        if (preserveBodyShape) {
            text += ` It is crucial to also preserve the person's original body shape and size. Do not make them thinner, larger, or change their proportions.`;
        }

        const parts = [
            {
                inlineData: {
                    data: base64ImageData,
                    mimeType: mimeType,
                },
            },
            { text: text }
        ];

        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image-preview',
            contents: {
                parts: parts,
            },
            config: {
                responseModalities: [Modality.IMAGE, Modality.TEXT],
            },
        });
        
        if (response.candidates && response.candidates.length > 0) {
            for (const part of response.candidates[0].content.parts) {
                if (part.inlineData) {
                    return `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`;
                }
            }
        }
        
        const textResponse = response.text;
        if (textResponse) {
             throw new Error(`AI returned text instead of an image: "${textResponse}"`);
        }

        throw new Error("No image was generated by the AI.");

    } catch (error) {
        console.error("Error calling Gemini API:", error);
        throw new Error("The AI model failed to process the request. Please try again.");
    }
}